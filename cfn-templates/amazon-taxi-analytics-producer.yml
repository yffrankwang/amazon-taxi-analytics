AWSTemplateFormatVersion: 2010-09-09

Description: Infrastructure to deploy and run the amazon-taxi-analytics-kinesis-replay application on EC2 instance

Parameters:
  KinesisStreamName:
     Type: String

  OpenSearchDomainEndpoint:
     Type: String

  SshKeyName:
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  SubnetId:
    Description: The Subnet ID for the EC2 instance
    Type: AWS::EC2::Subnet::Id

  ClientIpAddressRange:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
    Description: IP address range that is able to access the EC2 instance and that gets full read and write access to the Elasticsearch Cluster and the Kibana dashboard
    MaxLength: 18
    MinLength: 9
    Type: String

  Release:
    Description: Github branch or release to be used for the consumer application
    Type: String
    Default: master


Outputs:
  ProducerInstance:
    Description: SSH connection to the instance that ingests trip events into the Kinesis stream
    Value: !Sub ssh -C ec2-user@${ProducerInstance.PublicDnsName}

  ProducerCommand:
    Description: Command to populate Kinesis stream with taxi trip events
    Value: !Sub java -jar amazon-taxi-analytics-kinesis-replay-*.jar -streamName ${KinesisStream} -streamRegion ${AWS::Region} -aggregate -speedup 3600 -objectPrefix "trip data/green_tripdata_2019"


Resources:
  ProducerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - !Ref AWS::Region
        - HVM64
      Monitoring: true
      InstanceType: t3.small
      IamInstanceProfile: !Ref ProducerInstanceProfile
      KeyName: !Ref SshKeyName
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
      - !GetAtt ProducerInstanceSecurityGroup.GroupId
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Name
        Value: !Sub ${AWS::StackName}-producer-instance
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -x
            
            yum update -y
            yum install -y tmux

            # install Java 11
            amazon-linux-extras enable java-openjdk11
            yum install -y java-11-openjdk maven

            # install
            amazon-linux-extras install -y nginx1

            echo 'server {
              listen 80;
              listen [::]:80;
              location /_dashboards {
                proxy_pass http://${OpenSearchDomainEndpoint};
                proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
                proxy_set_header   X-Forwarded-Proto $scheme;
                proxy_set_header   X-Forwarded-Port  $server_port;
              }
            }' | tee /etc/nginx/conf.d/es-proxy.conf

            systemctl enable nginx
            systemctl start nginx

            su - ec2-user
            wget https://github.com/yffrankwang/amazon-taxi-analytics/archive/${Release}.zip
            unzip ${Release}.zip
            cd amazon-taxi-analytics-${Release}/kinesis-replay-app
            mvn clean package -B 
            cp target/amazon-taxi-analytics-*.jar ~/
            exit



  ProducerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub allow SSH access from ${ClientIpAddressRange}
      SecurityGroupIngress:
      - CidrIp: !Ref ClientIpAddressRange
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80

  ProducerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: ProducerRole

  ProducerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: root
          PolicyDocument:
            !Sub |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "kinesis:DescribeStream",
                          "kinesis:ListShards",
                          "kinesis:GetShardIterator",
                          "kinesis:GetRecords",
                          "kinesis:PutRecord",
                          "kinesis:PutRecords"
                      ],
                      "Resource": "${KinesisStream.Arn}"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "cloudwatch:PutMetricData"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": "cloudformation:DescribeStacks",
                      "Resource": "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "s3:GetObject",
                          "s3:ListBucket"
                      ],
                      "Resource": [
                        "arn:aws:s3:::nyc-tlc",
                        "arn:aws:s3:::nyc-tlc/*"
                      ]
                  }
                ]
              }


Mappings:
  AWSRegionArch2AMI:
    eu-central-1:
      HVM64: ami-0f3a43fbf2d3899f7
    eu-west-1:
      HVM64: ami-07683a44e80cd32c5
    us-west-2:
      HVM64: ami-061392db613a6357b
    us-east-1:
      HVM64: ami-0de53d8956e8dcf80
    us-east-2:
      HVM64: ami-02bcbb802e03574ba
